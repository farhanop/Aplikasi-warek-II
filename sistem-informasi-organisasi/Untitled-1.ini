Struktur Proyek Fullstack dengan React, Express, Knex, dan Docker
Proyek ini dirancang sebagai aplikasi full-stack yang mudah dikelola, disebarkan, dan dipahami oleh pengembang baru.

Tool digunanakan untuk projek ini JetBrains dan docker destop untuk SQL

1. Struktur Direktori Proyek
Direktori root proyek Anda akan terlihat seperti ini:

sistem-informasi-organisasi/
├── docker-compose.yml           # Konfigurasi Docker untuk semua layanan
├── .env.example                 # Contoh variabel lingkungan Docker
├── backend/                     # Folder untuk aplikasi backend (Node.js/Express)
│   ├── Dockerfile               # Dockerfile untuk image backend
│   ├── package.json             # Dependensi backend
│   ├── app.js                   # Entry point Express.js
│   ├── knexfile.js              # Konfigurasi Knex.js
│   ├── src/                     # Source code backend
│   │   ├── api/                 # Modul API (e.g., auth, org, facilities, news)
│   │   │   ├── auth.js
│   │   │   ├── organizational.js
│   │   │   ├── facilities.js
│   │   │   └── news.js
│   │   ├── middleware/          # Middleware Express (e.g., JWT authentication)
│   │   │   └── authMiddleware.js
│   │   ├── db/                  # Konfigurasi database Knex
│   │   │   ├── migrations/      # File migrasi database (versi tabel)
│   │   │   └── seeds/           # Data seed untuk database
│   │   └── services/            # Logika bisnis dan interaksi DB
│   │       ├── authService.js
│   │       ├── orgService.js
│   │       └── ...
│   └── .env.example             # Contoh variabel lingkungan backend
├── frontend/                    # Folder untuk aplikasi frontend (React)
│   ├── Dockerfile               # Dockerfile untuk image frontend
│   ├── package.json             # Dependensi frontend
│   ├── public/                  # File statis (index.html, logo, dll.)
│   │   └── index.html
│   │   └── UIGM.png
│   ├── src/                     # Source code React
│   │   ├── App.js               # Komponen utama aplikasi
│   │   ├── index.css            # CSS utama (termasuk Tailwind)
│   │   ├── components/          # Komponen UI yang dapat digunakan kembali
│   │   │   ├── Navbar.js
│   │   │   ├── Footer.js
│   │   │   └── ...
│   │   ├── pages/               # Halaman-halaman utama
│   │   │   ├── HomePage.js
│   │   │   ├── ChartPage.js
│   │   │   ├── VisionMissionPage.js
│   │   │   ├── AboutUsPage.js
│   │   │   ├── UniversityNewsPage.js
│   │   │   └── ContactUsPage.js
│   │   ├── admin/               # Admin dashboard (CPanel, management pages)
│   │   │   ├── AdminDashboard.js
│   │   │   ├── ChartManagement.js
│   │   │   ├── FacilitiesManagement.js
│   │   │   └── NewsManagement.js
│   │   └── utils/               # Utilitas (e.g., API calls, translation logic)
│   │       ├── apiConfig.js
│   │       └── translations.js
│   └── .env.example             # Contoh variabel lingkungan frontend
└── README.md

2. Konfigurasi Docker (docker-compose.yml)
File ini akan memungkinkan Anda menjalankan seluruh tumpukan aplikasi (frontend, backend, database MySQL) dengan satu perintah.

version: '3.8'

services:
  # MySQL Database Service
  db:
    image: mysql:8.0
    container_name: mysql_db
    environment:
      MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD} # Dari .env di root
      MYSQL_DATABASE: ${DB_NAME}
      MYSQL_USER: ${DB_USER}
      MYSQL_PASSWORD: ${DB_PASSWORD}
    ports:
      - "3306:3306"
    volumes:
      - db_data:/var/lib/mysql # Persistent data
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 20s
      retries: 10

  # Backend Service (Node.js/Express)
  backend:
    build:
      context: ./backend # Lokasi Dockerfile backend
      dockerfile: Dockerfile
    container_name: express_backend
    ports:
      - "5000:5000" # Port API backend
    environment:
      PORT: 5000
      DB_HOST: db # Nama host layanan database di Docker network
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_NAME: ${DB_NAME}
      JWT_SECRET: ${JWT_SECRET}
    depends_on:
      db:
        condition: service_healthy # Pastikan DB berjalan sebelum backend dimulai
    volumes:
      - ./backend:/app # Mount kode backend untuk hot-reloading (opsional untuk dev)
      - /app/node_modules # Kecualikan node_modules dari mount volume
    command: npm start # Jalankan aplikasi Node.js

  # Frontend Service (React)
  frontend:
    build:
      context: ./frontend # Lokasi Dockerfile frontend
      dockerfile: Dockerfile
    container_name: react_frontend
    ports:
      - "3000:3000" # Port aplikasi React
    environment:
      REACT_APP_API_BASE_URL: http://localhost:5000 # Sesuaikan jika di-deploy
    volumes:
      - ./frontend:/app # Mount kode frontend untuk hot-reloading
      - /app/node_modules # Kecualikan node_modules dari mount volume
    depends_on:
      - backend # Frontend bergantung pada backend (meskipun tidak langsung)
    command: npm start # Jalankan aplikasi React

volumes:
  db_data: # Volume untuk menyimpan data database secara persisten


=============================================================================================================================================


Panduan Menjalankan Proyek React dan Express Secara Lokal (Native)
Untuk menjalankan aplikasi full-stack ini di komputer Anda tanpa Docker Compose, Anda perlu memastikan setiap komponen (MySQL, Backend, Frontend) berjalan secara terpisah.

Prasyarat:
Node.js dan npm (atau Yarn) Terinstal: Pastikan Anda memiliki Node.js dan npm terinstal di sistem Anda. (Lihat Langkah 1 dari panduan sebelumnya jika belum).

MySQL Server Terinstal dan Berjalan Secara Lokal: Anda perlu menginstal MySQL Server langsung di mesin lokal Anda (bukan di Docker) dan memastikan layanannya berjalan. Anda bisa mengunduhnya dari situs resmi MySQL. ATAU: Anda dapat menggunakan Docker Desktop untuk menjalankan kontainer MySQL (lihat langkah 2.6 di bawah).

Langkah 1: Buat Struktur Direktori Proyek
Jika Anda belum memiliki struktur direktori ini, buatlah seperti ini di lokasi pilihan Anda (misalnya C:\Users\farha\Documents\Projects\sistem-informasi-organisasi):

sistem-informasi-organisasi/
├── backend/                     # Folder untuk aplikasi backend (Node.js/Express)
│   ├── package.json             # Dependensi backend
│   ├── app.js                   # Entry point Express.js
│   ├── knexfile.js              # Konfigurasi Knex.js
│   ├── src/                     # Source code backend
│   │   ├── api/                 # Modul API
│   │   ├── middleware/          # Middleware Express
│   │   ├── db/                  # Konfigurasi database Knex
│   │   │   ├── migrations/      # File migrasi database
│   │   │   └── seeds/           # Data seed untuk database
│   │   └── services/            # Logika bisnis
│   └── .env                     # File variabel lingkungan backend (BARU/DIUBAH)
├── frontend/                    # Folder untuk aplikasi frontend (React)
│   ├── package.json             # Dependensi frontend
│   ├── public/                  # File statis (index.html, logo, dll.)
│   ├── src/                     # Source code React
│   │   ├── App.js               # Komponen utama aplikasi
│   │   ├── index.css            # CSS utama (termasuk Tailwind)
│   │   └── ... (komponen & halaman lainnya)
│   └── .env                     # File variabel lingkungan frontend (BARU/DIUBAH)
└── README.md

Langkah 2: Siapkan Proyek Backend (Express.js + Knex.js)
Navigasi ke folder backend di Command Prompt:

cd C:\Users\farha\Documents\Projects\sistem-informasi-organisasi\backend

Inisialisasi Proyek dan Instal Dependensi:
Jika belum, instal dependensi backend:

npm init -y
npm install express cors dotenv jsonwebtoken bcryptjs knex mysql2 nodemon

Pastikan File Backend Ada: Salin semua file backend (app.js, knexfile.js, isi src/api/, src/middleware/, src/db/, src/services/) seperti yang telah saya berikan di respons sebelumnya, ke dalam folder backend/ Anda.

Konfigurasi .env Backend (PENTING!):
Buat atau perbarui file .env di dalam folder backend/ dengan konten berikut:

PORT=5000
DB_HOST=127.0.0.1  # MySQL berjalan di localhost mesin Anda, baik native atau Docker
DB_USER=root      # Atau user MySQL lokal Anda yang lain
DB_PASSWORD=      # Kosongkan jika MySQL lokal Anda tidak pakai password
DB_NAME=db_projek # Nama database yang Anda inginkan
JWT_SECRET=your_super_secret_jwt_key_here # Ganti dengan kunci rahasia yang kuat

Pastikan DB_HOST adalah 127.0.0.1 karena MySQL berjalan langsung di mesin Anda, baik secara native atau di dalam kontainer Docker yang port-nya diekspos ke localhost.

Konfigurasi knexfile.js Backend:
Pastikan backend/knexfile.js Anda memiliki konfigurasi development yang menunjuk ke 127.0.0.1 dan tidak menggunakan password:

// backend/knexfile.js
require('dotenv').config();

module.exports = {
  development: {
    client: 'mysql2',
    connection: {
      host: process.env.DB_HOST || '127.0.0.1',
      user: process.env.DB_USER || 'root',
      password: process.env.DB_PASSWORD || '', // Tanpa password
      database: process.env.DB_NAME || 'db_projek',
    },
    migrations: {
      directory: './src/db/migrations',
    },
    seeds: {
      directory: './src/db/seeds',
    },
  },
  // ... (konfigurasi production jika ada)
};

Buat Database MySQL Lokal atau di Docker (Pilih Salah Satu):

Opsi A: MySQL Server Terinstal Secara Native (Sudah dijelaskan sebelumnya)
Sebelum menjalankan migrasi, Anda perlu membuat database db_projek secara manual di MySQL Server lokal Anda. Anda bisa melakukannya via MySQL Workbench, PHPMyAdmin, atau terminal MySQL:

CREATE DATABASE db_projek;

Opsi B: Menggunakan Kontainer MySQL via docker run (Pilihan Anda Saat Ini)
Jika Anda ingin menggunakan Docker Desktop untuk database MySQL saja (tanpa Docker Compose), buka Command Prompt baru dan jalankan perintah berikut:

docker run --name mysql-db-projek ^
-e MYSQL_ROOT_PASSWORD="" ^
-e MYSQL_DATABASE=db_projek ^
-e MYSQL_ALLOW_EMPTY_PASSWORD="yes" ^
-p 3306:3306 ^
-d mysql:8.0

--name mysql-db-projek: Memberikan nama yang mudah diingat pada kontainer Anda.

-e MYSQL_ROOT_PASSWORD="": Mengatur password root menjadi kosong.

-e MYSQL_DATABASE=db_projek: Secara otomatis membuat database db_projek saat kontainer pertama kali dijalankan.

-e MYSQL_ALLOW_EMPTY_PASSWORD="yes": Penting untuk mengizinkan password root kosong.

-p 3306:3306: Memetakan port 3306 di mesin host Anda ke port 3306 di dalam kontainer. Ini memungkinkan aplikasi lokal Anda terhubung ke localhost:3306.

-d: Menjalankan kontainer di latar belakang (detached mode).

mysql:8.0: Menggunakan image MySQL versi 8.0.

Setelah perintah ini, kontainer MySQL Anda akan berjalan di port 3306 pada localhost Anda.

Jalankan Migrasi dan Seed Database:
Setelah database db_projek dibuat (baik secara native atau di Docker) dan Anda berada di folder backend/ di CMD:

npm run knex migrate:latest
npm run knex seed:run

(Ingatlah untuk mengisi file backend/src/db/seeds/initial_data.js dengan data awal yang relevan, termasuk pengguna admin dengan password yang di-hash).

Jalankan Backend:
Dari folder backend/ di CMD:

npm start

Server backend Anda sekarang akan berjalan di http://localhost:5000.

Langkah 3: Siapkan Proyek Frontend (React)
Navigasi ke folder frontend di Command Prompt (buka CMD baru atau navigasi dari folder backend):

cd C:\Users\farha\Documents\Projects\sistem-informasi-organisasi\frontend

Inisialisasi Proyek dan Instal Dependensi:
Jika belum, instal dependensi frontend:

npx create-react-app .
npm install -D tailwindcss postcss autoprefixer
npx tailwindcss init -p

Pastikan File Frontend Ada: Salin semua file frontend (App.js, index.css, public/UIGM.png) seperti yang telah saya berikan di respons sebelumnya, ke dalam folder frontend/ Anda.

Konfigurasi .env Frontend (PENTING!):
Buat atau perbarui file .env di dalam folder frontend/ dengan konten berikut:

REACT_APP_API_BASE_URL=http://localhost:5000

Konfigurasi Tailwind CSS di frontend/tailwind.config.js:

/** @type {import('tailwindcss').Config} */
module.exports = {
  content: [
    "./src/**/*.{js,jsx,ts,tsx}",
    "./public/index.html",
  ],
  theme: {
    extend: {},
  },
  plugins: [],
}

Tambahkan Direktif Tailwind ke frontend/src/index.css:

@tailwind base;
@tailwind components;
@tailwind utilities;

Pastikan html2canvas dimuat di frontend/public/index.html:
Buka frontend/public/index.html dan pastikan baris ini ada di dalam tag <head> atau tepat sebelum </body>:

<script src="https://cdnjs.cloudflare.com/ajax/libs/html2canvas/1.4.1/html2canvas.min.js"></script>

Jalankan Frontend:
Dari folder frontend/ di CMD:

npm start

Aplikasi React Anda sekarang akan terbuka di browser default Anda (biasanya di http://localhost:3000).

Ringkasan Alur Kerja:
Jika menggunakan Docker untuk MySQL: Buka CMD 1, jalankan docker run perintah untuk MySQL.

Buka CMD 2, navigasi ke backend/, jalankan npm start.

Buka CMD 3, navigasi ke frontend/, jalankan npm start.

Akses aplikasi di http://localhost:3000.

Pengaturan ini memungkinkan Anda untuk mengontrol setiap bagian aplikasi secara terpisah di mesin lokal Anda.